package movieapp.persistance;



import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.List;

import javax.persistence.EntityManager;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.dao.DataIntegrityViolationException;

import movieapp.entity.Movie;

@DataJpaTest
class MovieRepositoryTest {

	@Autowired
	private MovieRepository movieRepository;
	
	@Autowired
	private EntityManager entityManager;
	
	@ParameterizedTest
	@ValueSource(strings = {
			"Z", 
			"Blade Runner", 
			"Night of the Day of the Dawn of the Son of the Bride of the Return of the Revenge of the Terror of the Attack of the Evil Mutant Hellbound Flesh Eating Crawling Alien Zombified Subhumanoid Living Dead, Part 5"})
	void testSaveTitle(String title) {
		// given
		int year = 1982;
		int duration = 173;
		// when + then
		saveAssertMovie(title, year, duration);
	}
	
	@ParameterizedTest
	@ValueSource(ints = {
			1, 
			170, 
			Integer.MAX_VALUE})
	@NullSource
	void testMovieWithDuration(Integer duration) {
		String title = "test " + duration + "mn";
		int year = 2020;
		saveAssertMovie(title, year, duration);
		
	}
	
	@Test
	void testSaveTitleEmptyNOK() {
		String title = null;
		int year = 1982;
		int duration = 173;
		assertThrows(DataIntegrityViolationException.class, 
				() -> saveAssertMovie(title, year, duration));
	}
	
	@Test
	void testFindByTitle() {
		String title = "un titre multiple";
		var movies = List.of(
			new Movie(title, 2020),
			new Movie(title, 2021),
			new Movie(title, 2022),
			new Movie("autre titre", 2020)
		);
		movies.forEach(entityManager::persist);
		entityManager.flush();
		var moviesFound = movieRepository.findByTitle(title);
		assertEquals(3, moviesFound.size());
		assertAll(moviesFound.stream().map(
				m -> () -> assertEquals(title, m.getTitle() ))
				);
	}
	
	private void saveAssertMovie(String title, Integer year, Integer duration) {
		Movie movie = new Movie(title, year, duration);
		// when
		movieRepository.save(movie);
		// then
		var idMovie = movie.getId();
		assertNotNull(idMovie, "id generated by database");
	}

}